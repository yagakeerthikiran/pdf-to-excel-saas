version: '3.8'

services:
  # Frontend Next.js app
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_POSTHOG_KEY=${NEXT_PUBLIC_POSTHOG_KEY}
      - NEXT_PUBLIC_POSTHOG_HOST=${NEXT_PUBLIC_POSTHOG_HOST}
      - NEXT_PUBLIC_SENTRY_DSN=${NEXT_PUBLIC_SENTRY_DSN}
      - NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL}
      - BACKEND_URL=http://backend:8000
      - BACKEND_API_KEY=${BACKEND_API_KEY}
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app-network

  # Backend API server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - BACKEND_API_KEY=${BACKEND_API_KEY}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - POSTHOG_PROJECT_API_KEY=${POSTHOG_PROJECT_API_KEY}
      - POSTHOG_HOST=${POSTHOG_HOST}
    restart: unless-stopped
    networks:
      - app-network

  # Background worker for PDF conversion
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: ["python", "conversion_worker.py"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - WORKER_ID=worker-1
      - POLL_INTERVAL=10
      - MAX_CONCURRENT_JOBS=5
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  # Additional workers for scaling
  worker-2:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    command: ["python", "conversion_worker.py"]
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}
      - WORKER_ID=worker-2
      - POLL_INTERVAL=10
      - MAX_CONCURRENT_JOBS=5
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - backend

  # Monitoring and health checks
  monitoring:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped
    networks:
      - app-network

  # Nginx reverse proxy (optional, for production load balancing)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: