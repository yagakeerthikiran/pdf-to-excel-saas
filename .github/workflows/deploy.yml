name: Deploy to Production

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_FRONTEND: pdf-excel-frontend
  ECR_REPOSITORY_BACKEND: pdf-excel-backend
  ECS_SERVICE_FRONTEND: pdf-excel-frontend-service
  ECS_SERVICE_BACKEND: pdf-excel-backend-service
  ECS_CLUSTER: pdf-excel-cluster

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Run frontend tests
        run: |
          cd frontend
          npm run lint
          npm run build

      - name: Run backend tests
        run: |
          cd backend
          python -m pytest tests/ -v

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-frontend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-backend
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -f Dockerfile.prod -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Download frontend task definition
        run: |
          aws ecs describe-task-definition --task-definition pdf-excel-frontend-task --query taskDefinition > frontend-task-definition.json

      - name: Download backend task definition
        run: |
          aws ecs describe-task-definition --task-definition pdf-excel-backend-task --query taskDefinition > backend-task-definition.json

      - name: Fill in the new frontend image ID in the Amazon ECS task definition
        id: frontend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: frontend-task-definition.json
          container-name: frontend
          image: ${{ steps.build-frontend.outputs.image }}

      - name: Fill in the new backend image ID in the Amazon ECS task definition
        id: backend-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: backend-task-definition.json
          container-name: backend
          image: ${{ steps.build-backend.outputs.image }}

      - name: Deploy Amazon ECS frontend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.frontend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_FRONTEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy Amazon ECS backend task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.backend-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Deploy workers
        run: |
          # Update worker task definition and restart service
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER }} --service pdf-excel-worker-service --force-new-deployment

  notify:
    needs: [test, build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            PDF to Excel SaaS Deployment
            Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}